def PROJECT = [
  name: 'test-vpc',
  infrastructure: [
    environments: [
      development: [
        //   Add details
      ],
      production: [
        //   Add details
      ]
    ]
  ]
]


pipeline {
    agent none


  environment {
        // PATH = "$TF_HOME:$PATH"
        DYNAMODB_STATELOCK = "gar-ddt-tfstatelock"
        NETWORKING_BUCKET = "gar-ddt-networking"
        AWS_ACCESS_KEY = credentials('terraform_access_key')
        AWS_SECRET_KEY = credentials('terraform_secret_key')
        TF_VAR_project_name = "${PROJECT.name}"
  }




    stages {
        stage('NetworkInit'){

        when {
            changeRequest target: 'master'
        }

          agent {
            docker {
              image 'hashicorp/terraform:light'
              args "--entrypoint '' -v /etc/passwd:/etc/passwd -v /var/lib/jenkins/.ssh:/var/lib/jenkins/.ssh"
            }
          }

            steps {
                    dir('networking/'){

                    // Init

                        sh 'terraform --version'

                        // sh "terraform init -input=false -plugin-dir=/var/jenkins_home/terraform_plugins \
                        // --backend-config='dynamodb_table=$DYNAMODB_STATELOCK' --backend-config='bucket=$NETWORKING_BUCKET'"

                        sh "terraform init \
                        --backend-config='dynamodb_table=$DYNAMODB_STATELOCK' --backend-config='bucket=$NETWORKING_BUCKET'"                    

                        sh "echo \$PWD"
                        sh "whoami"
                    }

                        script {

                            // Plan

                            try {
                            sh "terraform workspace new ${params.WORKSPACE}"
                            } catch (err) {
                                sh "terraform workspace select ${params.WORKSPACE}"
                            }        

                            sh "terraform plan -out terraform-networking.tfplan;echo \$? > status"                                
                            
                            stash name: "terraform-networking-plan", includes: "terraform-networking.tfplan"



                            // Apply 
                            
                            def apply = false
                            try {
                                input message: 'confirm apply', ok: 'Apply Config'
                                apply = true
                            } catch (err) {
                                apply = false
                                dir('networking'){                   

                                    sh "terraform destroy -force"         

                                }
                                currentBuild.result = 'UNSTABLE'
                            }
                            if(apply){
                                dir('networking'){
                                    unstash "terraform-networking-plan"
                                    sh 'terraform apply terraform-networking.tfplan'
                                }
                            }
                        }

                }
        }
    }
}