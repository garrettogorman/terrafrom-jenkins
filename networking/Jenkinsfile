def PROJECT = [
  name: 'test-vpc',
  infrastructure: [
    environments: [
      development: [
        //   Add details
      ],
      production: [
        //   Add details
      ]
    ]
  ]
]


pipeline {
    agent none


    
    // tools {
    //     "org.jenkinsci.plugins.terraform.TerraformInstallation" "terraform-0.11.8"
    // }
    // parameters {
    //     string(name: 'WORKSPACE', defaultValue: 'development', description:'worspace to use in Terraform')
    // }
    // environment {
    //     TF_HOME = tool('terraform-0.11.8')
    //     TF_IN_AUTOMATION = "true"
    //     PATH = "$TF_HOME:$PATH"
    //     DYNAMODB_STATELOCK = "gar-ddt-tfstatelock"
    //     NETWORKING_BUCKET = "gar-ddt-networking"
    //     AWS_ACCESS_KEY = credentials('terraform_access_key')
    //     AWS_SECRET_KEY = credentials('terraform_secret_key')
    // }



  environment {
        // PATH = "$TF_HOME:$PATH"
        DYNAMODB_STATELOCK = "gar-ddt-tfstatelock"
        NETWORKING_BUCKET = "gar-ddt-networking"
        AWS_ACCESS_KEY = credentials('terraform_access_key')
        AWS_SECRET_KEY = credentials('terraform_secret_key')
        TF_VAR_project_name = "${PROJECT.name}"
  }




    stages {
        stage('NetworkInit'){

          agent {
            docker {
              image 'hashicorp/terraform:light'
              args "--entrypoint '' -v /etc/passwd:/etc/passwd -v /var/lib/jenkins/.ssh:/var/lib/jenkins/.ssh"
            }
          }

            steps {
                dir('networking/'){
                    sh 'terraform --version'

                    sh "terraform init -input=false -plugin-dir=/var/jenkins_home/terraform_plugins \
                    --backend-config='dynamodb_table=$DYNAMODB_STATELOCK' --backend-config='bucket=$NETWORKING_BUCKET'"

                    sh "echo \$PWD"
                    sh "whoami"
                }
            }
        }

        stage('NetworkPlan'){

          agent {
            docker {
              image 'hashicorp/terraform:light'
              args "--entrypoint '' -v /etc/passwd:/etc/passwd -v /var/lib/jenkins/.ssh:/var/lib/jenkins/.ssh"
            }
          }

            steps {
                dir('networking/'){
                    script {
                        try {
                           sh "terraform workspace new ${params.WORKSPACE}"
                        } catch (err) {
                            sh "terraform workspace select ${params.WORKSPACE}"
                        }        

                        sh "terraform plan -out terraform-networking.tfplan;echo \$? > status"                                
                        
                        stash name: "terraform-networking-plan", includes: "terraform-networking.tfplan"
                    }
                }
            }
        }
        stage('NetworkApply'){

          agent {
            docker {
              image 'hashicorp/terraform:light'
              args "--entrypoint '' -v /etc/passwd:/etc/passwd -v /var/lib/jenkins/.ssh:/var/lib/jenkins/.ssh"
            }
          }

            steps {
                script{
                    def apply = false
                    try {
                        input message: 'confirm apply', ok: 'Apply Config'
                        apply = true
                    } catch (err) {
                        apply = false
                        dir('networking'){                   

                            sh "terraform destroy -force"         

                        }
                        currentBuild.result = 'UNSTABLE'
                    }
                    if(apply){
                        dir('networking'){
                            unstash "terraform-networking-plan"
                            sh 'terraform apply terraform-networking.tfplan'
                        }
                    }
                }
            }
        }
    }
}